=r($width)
  @media only screen and (max-width: $width+ "px")
    @content

=rm($width)
  @media only screen and (min-width: $width+ "px")
    @content

=md
  +r(1023)
    @content

=sm
  +r(767)
    @content

=xs
  +r(599)
    @content

=ls($letterspacing)
  letter-spacing: $letterspacing/1000+em

=smooth-scroll
  -webkit-overflow-scrolling: touch

=smooth-font
  -webkit-font-smoothing: antialiased
  -moz-osx-font-smoothing: grayscale

=h
  &:hover
    @content

=after($content: "")
  &::after
    @if $content == "none"
      content: none
    @else
      content: $content
    @content

=before($content: "")
  &::before
    @if $content == "none"
      content: none
    @else
      content: $content
    @content

=hover
  .no-touch &:hover
    @content

=pa($top: auto, $right: auto, $bottom: auto, $left: auto)
   position: absolute
   top: $top
   right: $right
   bottom: $bottom
   left: $left

=vcenter
  position: absolute
  top: 50%
  left: 50%
  transform: translate(-50%,-50%)

=center($axis)
  @if $axis == both
    +vcenter
  @else if $axis == h
    position: absolute
    left: 50%
    transform: translateX(-50%)
  @else if $axis == v
    position: absolute
    top: 50%
    transform: translateY(-50%)

=placeholder
  &::placeholder
    @content

=cover
  position: absolute
  top: 0
  left: 0
  width: 100%
  height: 100%

=coverimg
  object-fit: cover
  font-family: 'object-fit: cover'

=containimg
  object-fit: contain
  font-family: 'object-fit: contain'

=coverbg
  background-repeat: no-repeat
  background-size: cover
  background-position: 50% 50%

=tr
  transition: all 300ms

=trs($dur: 300, $what: all, $easing: ease)
  transition: $dur+ms $what $easing

=retina
  @media only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min-device-pixel-ratio: 2)
    @content

=scale($var)
  transform: scale($var)

=keyframes($name)
  @-webkit-keyframes #{$name}
    @content
  @-moz-keyframes #{$name}
    @content
  @-ms-keyframes #{$name}
    @content
  @keyframes #{$name}
    @content

=rotate($deg: 0, $m11: 0, $m12: 0, $m21: 0, $m22: 0)
  transform: rotate($deg + deg)
  filter: progid:DXImageTransform.Microsoft.Matrix(M11=$m11, M12=$m12,M21=$m21, M22=$m22, sizingMethod='auto expand')

@function vw($resolution, $target)
  $vw-context: ($resolution * .01) * 1px
  @return ($target / $vw-context) * 1vw

@function em($pixels, $context: 16)
  @return ($pixels / $context) * 1em

=textOverflow
  overflow: hidden
  text-overflow: ellipsis
  white-space: nowrap

//aspect-ratio(4, 3)
=aspectRatio($width, $height)
  position: relative
  &:before
    display: block
    content: ""
    width: 100%
    padding-top: ($height / $width) * 100%

  ~ *
    position: absolute
    top: 0
    left: 0
    right: 0
    bottom: 0

=blur($radius)
  -webkit-filter: blur($radius+px)
  -ms-filter: blur($radius+px)
  filter: url("data:image/svg+xmlutf8,<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"><filter id=\"blur\"><feGaussianBlur stdDeviation=\"#{$radius+px}\" /></filter></svg>#blur")
  filter: progid:DXImageTransform.Microsoft.Blur(Strength=$radius+px)
  filter: blur($radius+px)
  +trs($globalAnimSpeed, filter)


=blurFilter($radius)
  filter: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='a' x='0' y='0' width='1' height='1' color-interpolation-filters='sRGB'%3E%3CfeGaussianBlur stdDeviation='#{$radius}' result='b'/%3E%3CfeMorphology operator='dilate' radius='#{$radius}'/%3E %3CfeMerge%3E%3CfeMergeNode/%3E%3CfeMergeNode in='b'/%3E%3C/feMerge%3E%3C/filter%3E %3C/svg%3E#a")

=darken($color: $black, $transparency: 0.75)
  +before
    +cover
    pointer-events: none
    background-color: rgba($color, $transparency)

=gradient($color2, $color1, $direction: left)
  background: $color1
  background: linear-gradient(to $direction, $color1 0%, $color2 100%)



